/*
 * $Id$
 * $Log$
 */

#ifndef REGEXP_HP
#define REGEXP_HP

#include "pcre.h"
#include <string>
#include <vector>

class RegExp
{
public:
    RegExp() {m_re = NULL;}
    RegExp(const string& inPattern) {m_re = NULL;SearchPatternSet(inPattern);}
    ~RegExp() {if (m_re != NULL) pcre_free(m_re);}
    void SearchPatternSet(const string& inPattern);
    bool Search(const string& inString);
    bool Search(const string& inString, vector<string>& outMatches);
    bool Search(const string& inString, const string& inPattern);
    bool Search(const string& inString, const string& inPattern, vector<string>& outMatches);

private:
    bool HandleRC(int inRC);
        
    pcre *m_re;
    const char *m_error;
    int m_erroffset;
};

class RegExpFail: public exception
{
public:
    RegExpFail(const string &inMessage) {m_message=inMessage;}
    const string& SPrint(void) {return m_message;}
    const char* what() const throw() {return m_message.c_str();}
private:
    string m_message;
};

inline ostream& operator<<(ostream &s, RegExpFail f)
{
    return s<<f.SPrint();
}

#endif
