 //
 // $Id$
 // $Log$
 //
%{
/*
 * $Id$
 *
 * Autogenerated by flex
 */

#include "CoreFlex.hp"
#include "CoreStandard.hp"
#include "CoreBisonDefs.hp"

#define YY_DECL int CoreFlex::Lex(Val *outVal, void *inPtr)
%}

%option noyywrap

string  \"[^\n"]+\"
ws      [ \t]+
alpha   [A-Za-z]
dig     [0-9]
name    ({alpha}|{dig}|\$)({alpha}|{dig}|[_.\-/$])*
num1    [-+]?{dig}+\.?([eE][-+]?{dig}+)?
num2    [-+]?{dig}*\.{dig}+([eE][-+]?{dig}+)?
number  {num1}|{num2}
operator [-+/*]
eol	\n

%%

{ws}    /* skip blanks and tabs */

"/*"    {
        int c;

        while((c = yyinput()) != 0)
            {
                if(c == '*')
                {
                    if((c = yyinput()) == '/')
                        break;
                    else
                        unput(c);
                }
            }
        }

{number}  cerr << "NUM " << yytext << endl; *outVal=atoi(yytext); return NUM;

{operator} cerr << "op " << yytext << endl; return yytext[0];

{name}    return yytext[0];

{string}  return yytext[0];

{eol}     return yytext[0];

%%

CoreFlex::CoreFlex(const string& inStr)
{
    m_buffer_state=yy_scan_bytes(inStr.c_str(), inStr.size());
    if (m_buffer_state == NULL) throw "Flex failed";
}

