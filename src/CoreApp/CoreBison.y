%{
/*
 * $Id$
 *
 * Autogenerated by bison
 */
#include "CoreBison.hp"
#include "CoreFlex.hp"
#include <math.h>
#include <stdio.h>
    
#define YYSTYPE double
#define YYPARSE_PARAM inFlex
#define YYLEX_PARAM inFlex
#define CoreBison_lex (static_cast<CoreFlex *>(inFlex))->Lex
#define YYDEBUG 1
#define YYERROR_VERBOSE 1
    
int yyerror( char *s);
%}

%pure_parser
%token NUM

%% /* Grammar rules and actions follow */

input:    /* empty */
| input line
;
line:     '\n'
| exp '\n'  { printf ("\t%.10g\n", $1); }
;
exp:      NUM             { $$ = $1;         }
| exp exp '+'     { $$ = $1 + $2;    }
| exp exp '-'     { $$ = $1 - $2;    }
| exp exp '*'     { $$ = $1 * $2;    }
| exp exp '/'     { $$ = $1 / $2;    }
/* Exponentiation */
| exp exp '^'     { $$ = pow ($1, $2); }
/* Unary minus    */
| exp 'n'         { $$ = -$1;        }
;
%%

void
CoreBison::Parse(void)
{
    yyparse(&m_flex);
}

int yyerror(char *s)
{
    cerr << "Bison error: " << s << endl;
    return 0;
}
