#ifndef GLTEXTURE_HP
#define GLTEXTURE_HP
/*
 * $Id: GLTexture.hp,v 1.5 2002/02/23 17:54:45 southa Exp $
 * $Log: GLTexture.hp,v $
 * Revision 1.5  2002/02/23 17:54:45  southa
 * Added GIF loader and GL tests
 *
 * Revision 1.4  2002/02/23 11:43:36  southa
 * Added AutoMonkey
 *
 * Revision 1.3  2002/02/20 22:57:57  southa
 * Loading GIF data, texture memory handling
 *
 * Revision 1.2  2002/02/18 22:43:53  southa
 * First stage GIF loader
 *
 * Revision 1.1  2002/02/18 22:04:37  southa
 * Initial texture loading
 *
 */

#include "GLStandard.hp"
#include "AutoMonkey.hp"

class LoaderFail: public exception
{
public:
    LoaderFail(const string& inFilename, const string& inMessage):
        m_filename(inFilename), m_message(inMessage) {}
    const string& FilenameGet(void) {return m_filename;}
    const string& MessageGet(void) {return m_message;}
    const char* what() const throw() {return m_message.c_str();}
    
private:
    string m_filename;
    string m_message;
};

inline ostream& operator<<(ostream &s, LoaderFail f)
{
    return s << "File '" << f.FilenameGet() << "': " << f.MessageGet();
}

class GLTexture
{
public:
    GLTexture(const string& inFilename);
    GLsizei Width(TextureRef inRef) const {return m_textureDefs[inRef].width;}
    GLsizei Height(TextureRef inRef) const {return m_textureDefs[inRef].height;}
    GLenum PixelFormat(TextureRef inRef) const {return m_textureDefs[inRef].pixelFormat;}
    GLenum PixelType(TextureRef inRef) const {return m_textureDefs[inRef].pixelType;}
    void *DataPtr(TextureRef inRef) const {return m_textureDefs[inRef].dataPtr;}
    ostream& ostreamPrint(ostream& inOut) const;
    
protected:
    class TextureDef
    {
    public:
        TextureDef(U8 *inDataPtr):dataPtr(inDataPtr) {}
        ~TextureDef() {if (m_autoMonkey.FreeInDestructor()) delete[]dataPtr;}
        GLsizei width;
        GLsizei height;
        GLenum pixelFormat;
        GLenum pixelType;
        U8 *dataPtr;
        AutoMonkey m_autoMonkey;
    };

    
private:
    void ThrowGifError(const string& inFilename, int inRC);
//    string m_inFilename;
    vector<TextureDef> m_textureDefs;
};

inline ostream& operator<<(ostream &inOut, const GLTexture& inTex)
{
    return inTex.ostreamPrint(inOut);
}

#endif
