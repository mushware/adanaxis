#ifndef GLTEXTURE_HP
#define GLTEXTURE_HP
/*
 * $Id: GLTexture.hp,v 1.3 2002/02/20 22:57:57 southa Exp $
 * $Log: GLTexture.hp,v $
 * Revision 1.3  2002/02/20 22:57:57  southa
 * Loading GIF data, texture memory handling
 *
 * Revision 1.2  2002/02/18 22:43:53  southa
 * First stage GIF loader
 *
 * Revision 1.1  2002/02/18 22:04:37  southa
 * Initial texture loading
 *
 */

#include "GLStandard.hp"
#include "AutoMonkey.hp"

class LoaderFail: public exception
{
public:
    LoaderFail(const string& inFilename, const string& inMessage):
        m_filename(inFilename), m_message(inMessage) {}
    const string& FilenameGet(void) {return m_filename;}
    const string& MessageGet(void) {return m_message;}
    const char* what() const throw() {return m_message.c_str();}
    
private:
    string m_filename;
    string m_message;
};

inline ostream& operator<<(ostream &s, LoaderFail f)
{
    return s << "File '" << f.FilenameGet() << "': " << f.MessageGet();
}

class GLTexture
{
public:
    GLTexture(const string& inFilename);
    ~GLTexture() { cerr << "GLTexture Dest" << endl;}
protected:
    class TextureDef
    {
    public:
        TextureDef(U8 *inDataPtr):dataPtr(inDataPtr) {cerr << "Con refctr=" <<
            m_autoMonkey.ReferenceCountGet() << endl;}
        ~TextureDef() {cerr << "Dest refCount=" << m_autoMonkey.ReferenceCountGet() << endl;  if (m_autoMonkey.FreeInDestructor() ){delete[]dataPtr; cerr << "Deleted" << endl;}}
        Size width;
        Size height;
        GLenum pixelFormat;
        GLenum pixelType;
        U8 *dataPtr;
        AutoMonkey m_autoMonkey;
    };

    
private:
    void ThrowGifError(const string& inFilename, int inRC);
    vector<TextureDef> m_textureDefs;    
};
#endif
